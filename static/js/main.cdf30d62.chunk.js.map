{"version":3,"sources":["logo.svg","Component/Navbar.js","Component/Buttons/PlayButton.js","Component/Player.js","Pages/PlayerPane/PlayerPane.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","style","background","src","logo","alt","Link","to","playbutton","props","state","token","playToggle","this","play","IconButton","aria-label","onClick","pause","Component","Player","item","is_playing","progress_ms","getPlayerDataCurrent","$","ajax","url","type","beforeSend","xhr","setRequestHeader","success","data","setState","console","log","backgroundImage","album","images","height","width","boxShadow","marginTop","margin","textAlign","fontWeight","color","name","artists","PlayButton","PlayerPane","path","scopes","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","App","deviceId","initPlayer","_token","access_token","onSpotifyWebPlaybackSDKReady","player","Spotify","getOAuthToken","cb","addListener","message","error","device_id","connect","paddingTop","marginLeft","marginRight","icon","fontSize","font","href","join","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.cdf30d62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bf2c47e6.svg\";","import React from 'react';\r\nimport {Link} from '@material-ui/core';\r\n\r\nimport logo from '../logo.svg'\r\n\r\nconst Navbar = () => {\r\n    \r\n    \r\n\r\n    return(\r\n\r\n        \r\n            <nav className=\"nav-wrapper\"  style={{ background: '#1DB954' }}>\r\n            <img src={logo} className=\"App-logo left\" alt=\"logo\"></img>\r\n                <div className=\"container\">\r\n                    \r\n                    <ul className=\"right\">\r\n                        <li><Link className=\"nav-tabs\" to=\"/player\">Player</Link></li>\r\n                        <li><Link className=\"nav-tabs\" to=\"/playlists\">Playlists</Link></li>\r\n                        <li><Link className=\"nav-tabs\" to=\"/profile\">Profile</Link></li>\r\n                    </ul>\r\n\r\n                </div>\r\n            </nav>\r\n            \r\n\r\n    )\r\n}\r\nexport default Navbar;","import React, {Component} from 'react';\r\n//import $ from 'jquery';\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport PlayIcon from \"@material-ui/icons/PlayArrow\"\r\n\r\nclass playbutton extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            token: this.props.token,\r\n            playToggle: false\r\n        }\r\n    }\r\n\r\n    /*play(){\r\n        function handleClick(e){\r\n            $.ajax({\r\n                url: \"https://api.spotify.com/v1/me/player/play\",\r\n                beforeSend: (xhr) => {\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n                },\r\n                success: () => {\r\n                        console.log('play: success!');\r\n                        this.setState({\r\n                            playToggle: true\r\n                        })\r\n                }\r\n            });\r\n        }\r\n    }\r\n    pause(){\r\n        function handleClick(e){\r\n            $.ajax({\r\n                url: \"https://api.spotify.com/v1/me/player/pause\",\r\n                beforeSend: (xhr) => {\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n                },\r\n                success: () => {\r\n                        console.log('pause: success!');\r\n                        this.setState({\r\n                            playToggle:false\r\n                        })\r\n\r\n                }\r\n            });\r\n        }\r\n    }\r\n    */\r\n\r\n    \r\n\r\n    render(){\r\n\r\n        var playButton = (this.state.play === false) ? (\r\n            <IconButton aria-label=\"Play\" onClick={this.play}>\r\n                <PlayIcon />\r\n            </IconButton>\r\n          ) : (\r\n            <IconButton aria-label=\"Play\" onClick={this.pause}>\r\n\r\n            </IconButton>\r\n          )\r\n\r\n        return(playButton);\r\n    }\r\n};\r\n\r\nexport default playbutton;\r\n","import React, { Component } from 'react';\r\nimport $ from \"jquery\";\r\nimport PlayButton from \"./Buttons/PlayButton\"\r\n\r\n/* \r\nThis is the main interface for music control.\r\nchild components are: \r\n  PlayButton\r\n  PauseButton\r\n  ForwardButton\r\n  PrevButton\r\n\r\n*/\r\nclass Player extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      token: this.props.token,\r\n      item: null,\r\n      is_playing: null,\r\n      progress_ms: null\r\n    }\r\n    this.getPlayerDataCurrent();\r\n  }\r\n\r\n  getPlayerDataCurrent(){\r\n    $.ajax({\r\n      url: \"https://api.spotify.com/v1/me/player/\",\r\n      type: \"GET\",\r\n      beforeSend: (xhr) => {\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n      },\r\n      success: (data) => {\r\n          if(!data){\r\n            console.log(\"Nothing Playing, try playing something\")\r\n          }\r\n          else{\r\n            this.setState({\r\n              item: data.item,\r\n              is_playing: data.is_playing,\r\n              progress_ms: data.progress_ms\r\n              \r\n            });\r\n          }\r\n          //console.log(\"actual ajax call: \" + data);\r\n      }\r\n    });\r\n  }\r\n\r\n  getPlayerDataContext(){\r\n    $.ajax({\r\n      url: \"https://api.spotify.com/v1/me/player/currently-playing\",\r\n      type: \"GET\",\r\n      beforeSend: (xhr) => {\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n      },\r\n      success: (data) => {\r\n\r\n        console.log(\"actual ajax call: \" + data);\r\n        \r\n        this.setState({\r\n          item: data.item,\r\n          is_playing: data.is_playing,\r\n          progress_ms: data.progress_ms\r\n        });\r\n      \r\n      }\r\n\r\n    });\r\n  }\r\n  \r\n  render(){\r\n    // Rendering will cause an error pre-flight\r\n    // ternary operator to handle null error\r\n    // Need to add Buttons and controls to connect to playbacksdk\r\n    //var coverArtURL = this.state.item.album.images[1].url;\r\n    const player = (this.state.item) ? (\r\n    \r\n      <div className=\"player-interface\">\r\n\r\n        <div className=\"cover-art\" \r\n          style={{\r\n            backgroundImage: \"url(\" + this.state.item.album.images[1].url + \")\",\r\n            height:this.state.item.album.images[1].height, \r\n            width:this.state.item.album.images[1].width,\r\n            boxShadow: \"1px 3px 1px black\",\r\n            marginTop:\"10%\",\r\n            margin: \"0 auto\"\r\n          }}>\r\n\r\n          <p className=\"track-name\" style={{textAlign: \"center\", fontWeight:\"700\", color:\"Black\" }}>{this.state.item.name} {this.state.item.artists[0].name}</p>\r\n          <p className=\"track-album-name\" style={{textAlign: \"center\"}}>{this.state.item.album.name}</p>\r\n          <PlayButton token = {this.state.token}/>\r\n          <p style={{textAlign: \"center\"}}><b>prog:</b> {this.state.progress_ms}</p>\r\n\r\n        </div>\r\n      </div>\r\n\r\n    ) : (\r\n\r\n      <div className=\"player-interface-notplaying\">\r\n        <div className=\"empty-cover\"\r\n             style = {{\r\n               margin: \"0 auto\",\r\n               marginTop: \"10%\",\r\n               height: \"300px\",\r\n               width: \"295px\",\r\n               boxShadow: \"2px 3px 2px black\",\r\n               background: \"#121212\"\r\n             }}>\r\n          <PlayButton token={this.props.token}/>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n\r\n    return (player);\r\n  }\r\n}\r\n\r\nexport default Player;","import React, {Component} from 'react';\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport './PlayerPane.css';\r\n\r\nimport Navbar from '../../Component/Navbar'\r\n//import Player from './Component/Player/Player'\r\n\r\n\r\nimport Player from '../../Component/Player'\r\n//import PlayButton from './Component/Buttons/PlayButton';\r\n//import shadows from '@material-ui/core/styles/shadows';\r\n\r\n/* \r\n\r\n  To Do:\r\n  Create Launch Page implemented with login button.\r\n  Set up react dom router with nav.\r\n\r\n*/\r\n\r\nclass PlayerPane extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      token: this.props.token,\r\n    }\r\n  }\r\n  \r\n  render(){\r\n    \r\n    return (\r\n      \r\n        <BrowserRouter>\r\n          <div className=\"App\"\r\n               style = {{\r\n                 background: \"#212121\",\r\n                 height: \"100vh\"\r\n               }}>\r\n            <header className=\"App-header\">\r\n            </header>\r\n              <Navbar token={this.state.token}>\r\n                <Route path=\"/playlists\">Player</Route>\r\n                <Route path=\"/playlists\">Playlists</Route>\r\n                <Route path=\"/about\">About</Route>\r\n                <Route path=\"/profile\">Profile</Route>\r\n              </Navbar>\r\n                \r\n                <div>\r\n\r\n                <Player token={this.state.token}/>\r\n                {\r\n                  //<Player token={this.state.token}></Player>\r\n                  //<User token={this.state.token}></User>\r\n                  //<RecentlyPlayed token={this.state.token}></RecentlyPlayed>\r\n                  //<Playlists token={this.state.token}></Playlists>\r\n                }\r\n\r\n                </div>\r\n          </div>\r\n        </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PlayerPane;","import React, { Component } from 'react';\r\nimport PlayerPane from './Pages/PlayerPane/PlayerPane.js'\r\nimport icon from './logo.svg';\r\n\r\nconst authEndpoint = 'https://accounts.spotify.com/authorize';\r\nconst clientId = \"9110bb9fbfc4422c85e722040cf63bc8\";\r\n//const redirectUri = \"https://shen-ui.github.io/Riffle/\";\r\nconst redirectUri = \"http://localhost:3000/Riffle\";\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-read-recently-played\",\r\n  \"user-read-private\",\r\n  \"user-read-email\",\r\n  \"streaming\"\r\n];\r\n\r\nconst hash = window.location.hash\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function(initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\nwindow.location.hash = \"\";\r\n//----------------CLASS------------------//\r\nexport default class App extends Component {\r\n    constructor(){\r\n      super();\r\n        this.state = {\r\n            token: null,\r\n            deviceId: ''\r\n        }\r\n\r\n        this.initPlayer();\r\n    }\r\n    componentDidMount() {\r\n        // Set token\r\n        let _token = hash.access_token;\r\n        if (_token) {\r\n          // Set token\r\n          this.setState({\r\n            token: _token\r\n          });\r\n        }\r\n    this.initPlayer();\r\n    }\r\n    initPlayer(){\r\n      window.onSpotifyWebPlaybackSDKReady = () => {\r\n        const token = this.state.token;\r\n        const player = new window.Spotify.Player({\r\n          name: 'Riffle Player',\r\n          getOAuthToken: cb => { cb(token); }\r\n        });\r\n      \r\n        // Error handling\r\n        player.addListener('initialization_error', ({ message }) => { console.error(message); });\r\n        player.addListener('authentication_error', ({ message }) => { console.error(message); });\r\n        player.addListener('account_error', ({ message }) => { console.error(message); });\r\n        player.addListener('playback_error', ({ message }) => { console.error(message); });\r\n      \r\n        // Playback status updates\r\n        player.addListener('player_state_changed', state => { console.log(state); });\r\n      \r\n        // Ready\r\n        player.addListener('ready', ({ device_id }) => {\r\n          console.log('Ready with Device ID', device_id);\r\n        });\r\n      \r\n        // Not Ready\r\n        player.addListener('not_ready', ({ device_id }) => {\r\n          console.log('Device ID has gone offline', device_id);\r\n        });\r\n      \r\n        // Connect to the player!\r\n        player.connect();\r\n      };\r\n    }\r\n    render(){\r\n\r\n\r\n        return(\r\n          \r\n            <div className=\"login-pane\">\r\n              {!this.state.token && (\r\n              \r\n              <div className=\"loginbox\" \r\n                   style={{\r\n                     paddingTop:\"25vh\", \r\n                     marginLeft:\"10vw\", \r\n                     marginRight:\"0vw\", \r\n                     height:\"100vh\"\r\n                  }}>\r\n    \r\n              <article>\r\n                <img src={icon} \r\n                    style={{\r\n                      height:\"40px\", \r\n                      width:\"40px\"\r\n                    }}\r\n                    alt=\"icon\"\r\n                />\r\n\r\n                <h4 style={{fontWeight:\"bold\" ,fontSize:\"20px\",font:\"Circular,arial\"}}>\r\n                  Riffle Collabrative Player \r\n                  \r\n                </h4>\r\n\r\n                <p style={{fontWeight:\"400\",font: \"Circular,ariel\",fontSize:\"17px\"}}> \r\n                  A fullstack project created by Peter Wang.<br/> \r\n                  Create memorable playlists with anyone.\r\n                  </p>\r\n\r\n                <p style={{fontWeight:\"100\", font:\"Circular,arial\", color:\"grey\"}}> \r\n                  Powered by Spotify.\r\n                  </p>\r\n               \r\n              \r\n              </article>\r\n              <a\r\n                className=\"btn\"\r\n                style={{marginTop:\"20px\", marginLeft: \"5%\", fontWeight:\"400\"}}\r\n                href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>\r\n                Login with Spotify\r\n              </a>\r\n              </div>\r\n\r\n              )}\r\n\r\n              {this.state.token && (\r\n                <PlayerPane token={this.state.token}/>\r\n              )\r\n            }\r\n          </div>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}