{"version":3,"sources":["logo.svg","Component/SearchBar/SearchBar.js","Component/User/User.js","Component/Navbar/Navbar.js","Component/Buttons/PlayButton.js","Component/Player/Player.js","Pages/Playlist.js","Component/Track/Track.js","Pages/RecentlyPlayed.js","Pages/PlayerPane.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","className","type","placeholder","Component","User","props","state","display_name","email","href","id","followers","profile_pic","showMenu","renderMenu","bind","this","getUserData","$","ajax","url","headers","token","success","data","setState","total","images","product","prevState","onClick","style","backgroundImage","Navbar","src","logo","alt","playbutton","playToggle","play","pause","dataType","contentType","console","log","error","Player","item","is_playing","progress_ms","getPlayerDataContext","beforeSend","xhr","setRequestHeader","album","height","width","textAlign","fontWeight","name","artists","PlayButton","Playlists","fetchPlaylists","playlists","items","map","playlist","index","Card","key","CardHeader","avatar","Avatar","aria-label","action","IconButton","title","subheader","owner","CardMedia","image","CardContent","Typography","variant","color","component","description","getCurrentState","Track","artist","track_cover_art_url","preview_url","uri","playTrack","getTrackData","JSON","stringify","trackhref","cors","duration_ms","lastElement","length","i","RecentlyPlayed","recents","getPrevData","prev","track","listStyleType","getEachPrev","PlayerPane","initPlayer","window","onSpotifyWebPlaybackSDKReady","player","Spotify","getOAuthToken","cb","addListener","message","device_id","deviceid","connect","then","background","Playlist","scopes","hash","location","substring","split","reduce","initial","parts","decodeURIComponent","App","cookieToken","checkCookie","_token","access_token","document","cookie","match","RegExp","paddingTop","paddingLeft","icon","fontSize","font","marginTop","marginLeft","borderRadius","join","class","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d8df0e94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bf2c47e6.svg\";"," import React, {Component} from 'react';\r\n import './searchbar.css'\r\n\r\n class SearchBar extends Component {\r\n    render(){\r\n        return(\r\n            <input className=\"search-bar\" type='text' placeholder=\"Search A Session\"></input>\r\n        )\r\n    }\r\n } \r\n export default SearchBar;","import React, {Component} from 'react';\r\nimport $ from 'jquery';\r\nimport './User.css';\r\n\r\n/*\r\n\r\n    Taken Props:\r\n        token: for cors jquery call\r\n\r\n    To Do:\r\n    implement a good framework\r\n    Will most likely be put into navbar with a drop down box that lets you see your profile and then go into a settings page if button \"settings\" is clicked.\r\n\r\n*/\r\n\r\nclass User extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            display_name: null,\r\n            email: null,\r\n            href: null, \r\n            id: null,\r\n            followers: null,\r\n            profile_pic: null,\r\n            showMenu: false\r\n        };\r\n        this.renderMenu = this.renderMenu.bind(this);\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.getUserData();\r\n    };\r\n\r\n    getUserData(){\r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/\",\r\n            'Content-Type' : 'application/json',\r\n            headers: {\r\n                'Authorization' : 'Bearer ' + this.props.token\r\n            },\r\n            type: \"GET\",\r\n            success: (data) => {        \r\n                this.setState({\r\n                    email: data.email,\r\n                    display_name: data.display_name,\r\n                    href: data.href,\r\n                    followers: data.followers.total,\r\n                    id: data.id,\r\n                    profile_pic: data.images[0].url,\r\n                    product: data.product\r\n                });\r\n            }\r\n        })\r\n    };\r\n\r\n    renderMenu(){\r\n        this.setState(prevState => ({\r\n            showMenu: !prevState.showMenu\r\n            })\r\n        );\r\n\r\n     \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"user-pane\">\r\n                <button className=\"user-btn\"\r\n                    onClick={this.renderMenu}\r\n                    style={{\r\n                        backgroundImage:`url(${this.state.profile_pic})`\r\n                    }}>\r\n\r\n                </button>\r\n            {\r\n                this.state.showMenu ? (\r\n                    <div className=\"drop-menu\">\r\n                        <p>{this.state.id}</p>\r\n                        <p>{this.state.product}</p>\r\n                        <p>{this.state.followers}</p>\r\n                    </div>\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default User;","import React from 'react';\r\n\r\nimport SearchBar from '../SearchBar/SearchBar';\r\n\r\nimport logo from '../../logo.svg'\r\nimport './navbar.css'\r\nimport User from '../User/User'\r\n\r\nconst Navbar = (props) => {\r\n\r\n    return(\r\n        \r\n            <nav className=\"nav-wrapper\">\r\n                \r\n                <img src={logo} className=\"nav-logo\" alt=\"logo\"></img>\r\n                <SearchBar/>\r\n                <User token={props.token}/>\r\n            </nav>\r\n            \r\n\r\n    )\r\n}\r\nexport default Navbar;","import React, {Component} from 'react';\r\nimport $ from 'jquery';\r\nimport './playButton.css'\r\n\r\nclass playbutton extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            token: this.props.token,\r\n            playToggle: false\r\n        }\r\n        this.play = this.play.bind(this);\r\n        this.pause = this.pause.bind(this);\r\n    }\r\n\r\n    play(){\r\n\r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/player/play\",\r\n            type: \"PUT\",\r\n            headers: {\r\n                'Authorization' : 'Bearer ' + this.props.token\r\n            },\r\n            dataType: \"json\",\r\n            contentType: \"application/json\",\r\n            success: () => {\r\n                console.log(`click ${this.state.playToggle}`);\r\n                this.setState(prevState => ({\r\n                    playToggle: !prevState.playToggle\r\n                    })\r\n                );\r\n            },\r\n            error: () => {\r\n                console.log(\"something went wrong play\");\r\n            }\r\n        });   \r\n    }\r\n    pause(){\r\n\r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/player/pause\",\r\n            type: \"PUT\",\r\n            headers: {\r\n                'Authorization' : 'Bearer ' + this.props.token\r\n            },\r\n            success: () => {\r\n                console.log(`click ${this.state.playToggle}`);\r\n                this.setState(prevState => ({\r\n                    playToggle: !prevState.playToggle\r\n                    })\r\n                );\r\n            },\r\n            error: () => {\r\n                console.log(\"something went wrong pause\");\r\n            }\r\n        });   \r\n    }\r\n    \r\n    \r\n\r\n    render(){\r\n\r\n\r\n        return(\r\n            <div>\r\n            {\r\n                this.state.playToggle ? (\r\n                    <button className='play-button' onClick={this.play}>Play</button>\r\n                ) : (\r\n                    <button className='pause-button' onClick={this.pause}>Pause</button>\r\n                )\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default playbutton;\r\n","import React, { Component } from 'react';\r\nimport $ from \"jquery\";\r\nimport PlayButton from \"../Buttons/PlayButton\"\r\nimport './player.css'\r\n/* \r\nThis is the main interface for music control.\r\nchild components are: \r\n  PlayButton\r\n  PauseButton\r\n  ForwardButton\r\n  PrevButton\r\n\r\n*/\r\nclass Player extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      token: this.props.token,\r\n      item: null,\r\n      is_playing: null,\r\n      progress_ms: null\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    this.getPlayerDataContext();\r\n  }\r\n\r\n  getPlayerDataContext(){\r\n    $.ajax({\r\n      url: \"https://api.spotify.com/v1/me/player/\",\r\n      type: \"GET\",\r\n      beforeSend: (xhr) => {\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n      },\r\n      success: (data) => {\r\n          if(!data){\r\n            console.log(\"Nothing Playing, try playing something\")\r\n          }\r\n          else{\r\n            this.setState({\r\n              item: data.item,\r\n              is_playing: data.is_playing,\r\n              progress_ms: data.progress_ms\r\n            });\r\n          }\r\n          //console.log(\"actual ajax call: \" + data);\r\n      }\r\n    });\r\n  }\r\n\r\n  getPlayerDataCurrent(){\r\n    $.ajax({\r\n      url: \"https://api.spotify.com/v1/me/player/currently-playing\",\r\n      type: \"GET\",\r\n      beforeSend: (xhr) => {\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n      },\r\n      success: (data) => {\r\n        if(!data){\r\n          console.log(\"nothing currently playing, try playing something!\")\r\n        }\r\n        else{\r\n          this.setState({\r\n            item: data.item,\r\n            is_playing: data.is_playing,\r\n            progress_ms: data.progress_ms\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n  \r\n  render(){\r\n    // Rendering will cause an error pre-flight\r\n    // ternary operator to handle null error\r\n    // Need to add Buttons and controls to connect to playbacksdk\r\n    //var coverArtURL = this.state.item.album.images[1].url;\r\n    const player = (this.state.item) ? (\r\n    \r\n      <div className=\"player-interface\">\r\n\r\n        <div className=\"cover-art\" \r\n          style={{\r\n            backgroundImage: `url(${this.state.item.album.images[1].url})`,\r\n            height:this.state.item.album.images[1].height,\r\n            width:this.state.item.album.images[1].width\r\n\r\n          }}>\r\n          \r\n        </div>\r\n        <div className=\"control-pane\">\r\n          <p className=\"track-name\" style={{textAlign: \"center\", fontWeight:\"700\"}}>{this.state.item.name} {this.state.item.artists[0].name}</p>\r\n          <p className=\"track-album-name\" style={{textAlign: \"center\"}}>{this.state.item.album.name}</p>\r\n          <p style={{textAlign: \"center\"}}><b>prog:</b> {this.state.progress_ms}</p>\r\n          <PlayButton token={this.state.token}/>\r\n        </div>\r\n      </div>\r\n\r\n    ) : (\r\n\r\n      <div className=\"player-interface\">\r\n        <div className=\"empty-cover\">\r\n          <PlayButton token={this.state.token}/>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n\r\n    return (player);\r\n  }\r\n}\r\n\r\nexport default Player;","import React, {Component} from 'react';\r\n//import PlayListTrackList from '../PlayListTrackList/PlayListTrackList'\r\nimport $ from \"jquery\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n/*\r\n\r\n    Taken Props: \r\n    token: for Cors ajax call\r\n\r\n    To Do:\r\n    Create an actual framework for this component with PlayListTrackList\r\n    Will probably be rendered as a card with a drop down list \r\n\r\n*/\r\n\r\nclass Playlists extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            token: null,\r\n            playlists : null\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchPlaylists();\r\n    }\r\n\r\n    fetchPlaylists = () => {\r\n        // When the playlist tab is clicked, it will call an\r\n        // ajax call that gets playlists. \r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/playlists\",\r\n            type: \"GET\",\r\n            beforeSend: (xhr) => {\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n            },\r\n            success: (data) => {\r\n                    this.setState({\r\n                        token: this.props.token,\r\n                        playlists: data.items\r\n                    })\r\n                    //console.log(data.items);\r\n\r\n            }\r\n        });\r\n    }\r\n    \r\n    //Method to display yourplaylists.\r\n    //May need a ComponentWillUpdate method to call this.\r\n    //Need to assign a key value per every playlist render.\r\n    getCurrentState(){\r\n        const playlists = this.state.playlists ? (\r\n            this.state.playlists.map(function (playlist, index){\r\n                return(\r\n                    //name of playlist\r\n                    //playlist image\r\n                    //maybe playlist creator\r\n\r\n                    <Card key={index}>\r\n                    <CardHeader\r\n                        avatar={\r\n                        <Avatar aria-label=\"recipe\">\r\n                            <img href={playlist.images[0].url} alt=\"playlist art\"/>\r\n                        </Avatar>\r\n                        }\r\n                        action={\r\n                        <IconButton aria-label=\"settings\">\r\n                        </IconButton>\r\n                        }\r\n                        title={playlist.name}\r\n                        subheader={playlist.owner.display_name}\r\n                    />\r\n                    <CardMedia\r\n                        image={playlist.images[0].url}\r\n                        title={playlist.name}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {playlist.description}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    </Card>\r\n                    //<PlayListTrackList token={token} trackhref={playlist.tracks.href}></PlayListTrackList>\r\n                )\r\n        })\r\n    ) : (\r\n            \r\n                <div> No Playlists Found! </div>\r\n            \r\n        )\r\n        return playlists;\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Playlists</h1>\r\n                <ul>\r\n                    {this.getCurrentState(this.state.token)}\r\n                </ul>\r\n            </div>\r\n           )\r\n\r\n    }\r\n}\r\n\r\nexport default Playlists;","import React, {Component} from 'react';\r\nimport './track.css'\r\nimport $ from 'jquery';\r\n/* \r\n\r\n    Takes Props:\r\n    token: Cors call requires the bearers token\r\n    trackhref: FULL href to the track ID \r\n\r\n    To Do:\r\n    Implement a play button that sends the song to current play state.\r\n    Make this component prettier.\r\n    \r\n  */\r\nclass Track extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            title: null,\r\n            artist: [],\r\n            track_cover_art_url: null,\r\n            preview_url: null,\r\n            uri: ''\r\n        }\r\n        this.playTrack = this.playTrack.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        this.getTrackData();\r\n    }\r\n    \r\n    playTrack() {\r\n        $.ajax({\r\n            url: 'https://api.spotify.com/v1/me/player/play',\r\n            type: 'PUT',\r\n            headers: {\r\n              'Authorization': 'Bearer ' + this.props.token\r\n            },\r\n            dataType: \"json\",\r\n            contentType: \"application/json\",\r\n            data: JSON.stringify({\r\n              \"uris\": [`${this.state.uri}`]\r\n            }),\r\n            success: (data) => {\r\n                console.log(`success: ${data}`)\r\n            },\r\n            error: (data) =>{\r\n                console.log(data);\r\n            }\r\n          });\r\n    }\r\n\r\n    //AJAX call to get data from spotify API with cors\r\n    getTrackData() {\r\n        $.ajax({\r\n        url: this.props.trackhref,\r\n        type: \"GET\",\r\n        cors: true,\r\n        contentType:'application/json',\r\n        beforeSend: (xhr) => {\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n        },\r\n            success: (data) => {\r\n                //log for diagnostic\r\n                //console.log(data);\r\n                this.setState({\r\n                    title: data.name,\r\n                    artist: data.artists,\r\n                    track_cover_art_url: data.album.images[1].url,\r\n                    preview_url: data.preview_url,\r\n                    duration_ms: data.duration_ms,\r\n                    uri: data.uri\r\n                })\r\n\r\n            }\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        const lastElement = this.state.artist.length;\r\n        var artists = this.state.artist.map(function(artist, i){\r\n            if (lastElement === i + 1){\r\n                return(<b key={i}>{artist['name']}</b>);\r\n            }\r\n            else{\r\n                return(<b key={i}>{artist['name'] + \", \"}</b>);\r\n            }\r\n        });\r\n\r\n        return(\r\n            <li className=\"track\">\r\n                    <img className=\"album-art\" \r\n                        src={this.state.track_cover_art_url} \r\n                        alt=\"album art\"\r\n                    >\r\n                    </img>  \r\n                    <div className=\"descriptor\">\r\n                        <p className=\"song-title\">{this.state.title}</p>\r\n                        <p className=\"song-artist\">{artists}</p>\r\n                        <button className=\"play-overlay\" onClick={this.playTrack}>Play</button>\r\n                    </div>\r\n            </li>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track","import React, { Component } from 'react';\r\nimport Track from '../Component/Track/Track';\r\nimport $ from 'jquery';\r\n/*\r\n\r\n    Taken Props:\r\n    token: Cors call requires the bearers token\r\n\r\n    To Do:\r\n    Make this tab prettier.\r\n    Otherwise looking good.\r\n    \r\n*/\r\n\r\nclass RecentlyPlayed extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            recents: null,\r\n            }\r\n    }\r\n    componentDidMount(){\r\n        //console.log(this.props.token);\r\n        this.getPrevData();\r\n    }\r\n    //call API to get data and sets to state\r\n    getPrevData(){\r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/player/recently-played\",\r\n            type: \"GET\",\r\n            beforeSend: (xhr) => {\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n            },\r\n            success: (data) => {\r\n                this.setState({\r\n                    recents: data.items,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // onHover={this.state.prev.track.preview_url}\r\n    getEachPrev(token){\r\n        const prevPlayed = this.state.recents ? (\r\n            this.state.recents.map(function(prev, index) {\r\n                return(                   \r\n                    <Track token={token} trackhref={prev.track.href} key={index}></Track>\r\n                )\r\n\r\n            })\r\n\r\n        ) : (\r\n            \r\n            <div> No Recent Replays </div>\r\n            \r\n        )\r\n\r\n        return prevPlayed;\r\n    };\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"recently-played\">\r\n\r\n                <ul style={{listStyleType:\"none\"}}>\r\n                {this.getEachPrev(this.props.token)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecentlyPlayed;","import React, {Component} from 'react';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nimport Navbar from '../Component/Navbar/Navbar.js'\r\n\r\n\r\nimport Player from '../Component/Player/Player'\r\nimport Playlists from './Playlist'\r\nimport RecentlyPlayed from './RecentlyPlayed'\r\n\r\n\r\n/* \r\n\r\n  To Do:\r\n  Create Launch Page implemented with login button.\r\n  Set up react dom router with nav.\r\n\r\n*/\r\n\r\nclass PlayerPane extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      token: this.props.token\r\n    }\r\n    this.initPlayer();\r\n\r\n  }\r\n  \r\n  initPlayer(){\r\n    window.onSpotifyWebPlaybackSDKReady = () => {\r\n      const token = this.state.token;\r\n      const player = new window.Spotify.Player({\r\n        name: 'Riffle Player',\r\n        getOAuthToken: cb => { cb(token); }\r\n      });\r\n    \r\n      // Error handling\r\n      player.addListener('initialization_error', ({ message }) => { console.error(message); });\r\n      player.addListener('authentication_error', ({ message }) => { console.error(message); });\r\n      player.addListener('playback_error', ({ message }) => { console.error(message); });\r\n    \r\n      // Playback status updates\r\n      player.addListener('player_state_changed', state => { console.log(state); });\r\n    \r\n      // Ready\r\n      player.addListener('ready', ({ device_id }) => {\r\n        console.log('Ready with Device ID', device_id);\r\n        this.setState = {deviceid: device_id};\r\n      });\r\n    \r\n      // Not Ready\r\n      player.addListener('not_ready', ({ device_id }) => {\r\n        console.log('Device ID has gone offline', device_id);\r\n      });\r\n    \r\n      // Connect to the player!\r\n      player.connect().then(success =>{\r\n        if(success) {\r\n          console.log(\"Player connected!\")\r\n        }\r\n      });\r\n      return player;\r\n    };\r\n  }\r\n  render(){\r\n    \r\n    return (\r\n      \r\n        <BrowserRouter>\r\n          <div className=\"App\"\r\n               style = {{\r\n                 background: \"#212121\",\r\n                 width: \"100%\"\r\n               }}>\r\n            <header className=\"App-header\">\r\n            </header>\r\n              <Navbar token={this.state.token}/>\r\n                <div>\r\n                <Player token={this.state.token}/>\r\n                <RecentlyPlayed token={this.state.token}></RecentlyPlayed>\r\n                <Playlists token={this.state.token}></Playlists>\r\n                {\r\n                  //<Player token={this.state.token}></Player>\r\n                  //<User token={this.state.token}></User>\r\n                  //<RecentlyPlayed token={this.state.token}></RecentlyPlayed>\r\n                  //<Playlists token={this.state.token}></Playlists>\r\n                }\r\n\r\n                </div>\r\n          </div>\r\n        </BrowserRouter>\r\n    )\r\n  }\r\n}\r\nexport default PlayerPane;","import React, { Component } from 'react';\r\nimport PlayerPane from './Pages/PlayerPane.js'\r\nimport icon from './logo.svg';\r\n\r\nconst authEndpoint = 'https://accounts.spotify.com/authorize';\r\nconst clientId = \"9110bb9fbfc4422c85e722040cf63bc8\";\r\n//const redirectUri = \"https://shen-ui.github.io/Riffle/\";\r\nconst redirectUri = \"http://localhost:3000/Riffle\";\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-read-recently-played\",\r\n  \"user-read-private\",\r\n  \"user-read-email\",\r\n  \"streaming\"\r\n];\r\n\r\nconst hash = window.location.hash\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function(initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\nwindow.location.hash = \"\";\r\n//----------------CLASS------------------//\r\nexport default class App extends Component {\r\n    constructor(){\r\n      super();\r\n\r\n      var cookieToken = this.checkCookie();\r\n      //if cookie doesnt exist wait\r\n      if(cookieToken != null){\r\n          this.state = {\r\n            token: cookieToken,\r\n          }\r\n      }\r\n      //set a new cookie if it not created\r\n      else {\r\n        this.state = {\r\n          token: null\r\n        }\r\n      }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Set token if cookie was empty\r\n      if(!this.state.token){\r\n        let _token = hash.access_token;\r\n        if (_token) {\r\n          // Set token\r\n          this.setState({\r\n            token: _token\r\n          });\r\n\r\n        //spotify tokens last 1 hour. \r\n        //will need to create something like a \"still listening\"\r\n        //pane to refresh token.\r\n        document.cookie=`token=${_token}`;\r\n        }\r\n      }//endif\r\n    }\r\n    // set Cookie: An expiration date (24 hours and token).\r\n    // checkCookie : Will return the token set in cookie if not expired. \r\n    checkCookie(){\r\n      var cookie = document.cookie;\r\n      var match = cookie.match(new RegExp('(^| )token=([^;]+)'));\r\n      if (match) {\r\n        return(match[2]);\r\n      }\r\n      else{\r\n        return null;\r\n      }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n          \r\n            <div className=\"login-pane\">\r\n              {!this.state.token && (\r\n              \r\n              <div className=\"loginbox\" \r\n                   style={{\r\n                     paddingTop:\"25vh\", \r\n                     paddingLeft:\"10vw\", \r\n                     height:\"100vh\",\r\n                     background: 'linear-gradient(35deg, #CCFFFF, #FFCCCC)'\r\n                  }}>\r\n    \r\n              <article>\r\n                <img src={icon} \r\n                    style={{\r\n                      height:\"40px\", \r\n                      width:\"40px\"\r\n                    }}\r\n                    alt=\"icon\"\r\n                />\r\n\r\n                <h4 style={{fontWeight:\"bold\" ,fontSize:\"20px\",font:\"Circular,arial\"}}>\r\n                  Riffle Collabrative Player \r\n                  \r\n                </h4>\r\n\r\n                <p style={{fontWeight:\"400\",font: \"Circular,ariel\",fontSize:\"17px\"}}> \r\n                  A fullstack project created by Peter Wang.<br/> \r\n                  Create memorable playlists with anyone.\r\n                  </p>\r\n\r\n                <p style={{fontWeight:\"100\", font:\"Circular,arial\", color:\"grey\"}}> \r\n                  Powered by Spotify.\r\n                  </p>\r\n               \r\n              \r\n              </article>\r\n              <a\r\n                className=\"btn\"\r\n                style={{marginTop:\"20px\", marginLeft: \"5%\", fontWeight:\"600\", borderRadius:\"25px\"}}\r\n                href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>\r\n                Login with Spotify\r\n              </a>\r\n\r\n              <footer class=\"nav-down\">\r\n                <p class=\"footer-sig\">Developed to share by <b>Peter Wang</b></p>\r\n                <div>\r\n                  <a href=\"mailto:peterhuiwang1995@gmail.com\"><i class=\"material-icons\">email</i></a>\r\n                  <a href=\"https://www.linkedin.com/in/shenhwang/\"><i class=\"material-icons\">work</i></a>\r\n                  <a href=\"https://github.com/shen-ui\"><i class=\"material-icons\">code</i></a>\r\n                </div>\r\n              </footer>\r\n              </div>\r\n\r\n              )}\r\n\r\n              {this.state.token && (\r\n                <PlayerPane token={this.state.token}/>\r\n              )\r\n            }\r\n          </div>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}