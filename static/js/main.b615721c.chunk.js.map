{"version":3,"sources":["logo.svg","Component/Navbar.js","Component/Player/Player.js","Pages/User/User.js","Component/Track/Track.js","Pages/RecentlyPlayed/RecentlyPlayed.js","Component/Playlist/Playlist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","style","background","src","logo","alt","Link","to","Player","state","item","album","artists","song_name","song_uri","is_playing","progress_ms","this","getPlayerData","$","ajax","url","type","beforeSend","xhr","setRequestHeader","props","token","success","data","setState","name","uri","images","Component","User","display_name","email","href","id","followers","profile_pic","product","getUserData","headers","total","fail","alert","Track","title","artist","track_cover_art_url","preview_url","duration_ms","getTrackData","trackhref","cors","contentType","Card","RecentlyPlayed","recents","getPrevData","items","map","prev","index","track","key","getEachPrev","Playlists","fetchPlaylists","playlists","playlist","CardHeader","avatar","Avatar","aria-label","action","IconButton","subheader","owner","CardMedia","image","CardContent","Typography","variant","color","component","description","getCurrentState","scopes","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","App","_token","access_token","path","join","Playlist","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b615721c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bf2c47e6.svg\";","import React from 'react';\r\nimport {Link} from '@material-ui/core';\r\n\r\nimport logo from '../logo.svg'\r\n\r\nconst Navbar = () => {\r\n    \r\n    \r\n\r\n    return(\r\n\r\n        \r\n            <nav className=\"nav-wrapper\"  style={{ background: '#1DB954' }}>\r\n            <img src={logo} className=\"App-logo left\" alt=\"logo\"></img>\r\n                <div className=\"container\">\r\n                    \r\n                    <ul className=\"right\">\r\n                        <li><Link className=\"nav-tabs\" to=\"/playlists\">Playlists</Link></li>\r\n                        <li><Link className=\"nav-tabs\" to=\"/about\">About</Link></li>\r\n                        <li><Link className=\"nav-tabs\" to=\"/profile\">Profile</Link></li>\r\n                    </ul>\r\n\r\n                </div>\r\n            </nav>\r\n            \r\n\r\n    )\r\n}\r\nexport default Navbar;","import React, {Component} from \"react\";\r\nimport $ from \"jquery\";\r\nimport \"./Player.css\";\r\n// NOTE: This ajax call to the Spotify API returns:\r\n// ALBUM(object), Playing(Bool), Progress (Int) \r\nclass Player extends Component {\r\n\r\n  state = {\r\n    item: null,\r\n    album: null,\r\n    artists: null,\r\n    song_name: null,\r\n    song_uri: null,\r\n    is_playing: null,\r\n    progress_ms: null\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getPlayerData();\r\n    \r\n  }\r\n\r\n  getPlayerData(){\r\n    $.ajax({\r\n      url: \"https://api.spotify.com/v1/me/player\",\r\n      type: \"GET\",\r\n      beforeSend: (xhr) => {\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n      },\r\n      success: (data) => {\r\n        if(!data){\r\n          return;\r\n        }\r\n        this.setState({\r\n          item: data.item,\r\n          album: data.item.album,\r\n          artists: data.item.artists,\r\n          song_name: data.item.name,\r\n          song_uri: data.item.uri,\r\n          is_playing: data.is_playing,\r\n          progress_ms: data.progress_ms,\r\n        });\r\n        \r\n      }\r\n    });\r\n  }\r\n  \r\n  render(){\r\n    \r\n    // Rendering will cause an error pre-flight\r\n    // ternary operator to handle null error\r\n    // Need to add Buttons and controls to connect to playbacksdk\r\n    var player = (this.state.item != null) ? (\r\n      <div>\r\n        <h1>Currently Playing</h1>\r\n        <img src={this.state.album.images[1].url} alt=\"coverart\"></img>\r\n        <p><b>Title:</b> {this.state.song_name}</p>\r\n        <p><b>Album:</b> {this.state.album.name}</p>\r\n        \r\n\r\n      </div>\r\n    ) : (\r\n      <h3>Nothing Playing</h3>\r\n    )\r\n\r\n    return (player);\r\n  }\r\n}\r\n\r\nexport default Player;","import React, {Component} from 'react';\r\nimport $ from 'jquery';\r\n\r\n/*\r\n\r\n    Taken Props:\r\n        token: for cors jquery call\r\n\r\n    To Do:\r\n    implement a good framework\r\n    Will most likely be put into navbar with a drop down box that lets you see your profile and then go into a settings page if button \"settings\" is clicked.\r\n\r\n*/\r\n\r\nclass User extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            display_name: null,\r\n            email: null,\r\n            href: null, \r\n            id: null,\r\n            followers: null,\r\n            profile_pic: null,\r\n            product: null\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.getUserData();\r\n    }\r\n    getUserData(){\r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/\",\r\n            'Content-Type' : 'application/json',\r\n            headers: {\r\n                'Authorization' : 'Bearer ' + this.props.token\r\n            },\r\n            type: \"GET\",\r\n            success: (data) => {        \r\n                this.setState({\r\n                    email: data.email,\r\n                    display_name: data.display_name,\r\n                    href: data.href,\r\n                    followers: data.followers.total,\r\n                    id: data.id,\r\n                    profile_pic: data.images[0].url,\r\n                    product: data.product\r\n                });\r\n            },\r\n            fail: () => {\r\n                alert(\"API Playlist call failed.\");\r\n            } \r\n            \r\n        })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n            <h1>User</h1>\r\n\r\n            <img src={this.state.profile_pic} alt=\"pfpic\"></img>\r\n            <p><b>ID</b>: {this.state.id}</p>\r\n            <p><b>PRODUCT</b>: {this.state.product}</p>\r\n            <p><b>FOLLOWERS</b>: {this.state.followers}</p>\r\n            \r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default User;","import React, {Component} from 'react';\r\nimport $ from 'jquery';\r\nimport Card from '@material-ui/core/Card';\r\n/* \r\n\r\n    Takes Props:\r\n    token: Cors call requires the bearers token\r\n    trackhref: FULL href to the track ID \r\n\r\n    To Do:\r\n    Implement a play button that sends the song to current play state.\r\n    Make this component prettier.\r\n    \r\n  */\r\nclass Track extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            title: null,\r\n            artist: [],\r\n            track_cover_art_url: null,\r\n            preview_url: null,\r\n            duration_ms: null,\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.getTrackData();\r\n    }\r\n    \r\n    //build url with trackID\r\n    //build the url first\r\n\r\n    //AJAX call to get data from spotify API with cors\r\n    getTrackData() {\r\n        $.ajax({\r\n        url: this.props.trackhref,\r\n        type: \"GET\",\r\n        cors: true,\r\n        contentType:'application/json',\r\n        beforeSend: (xhr) => {\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n        },\r\n            success: (data) => {\r\n                //log for diagnostic\r\n                //console.log(data);\r\n                this.setState({\r\n                    title: data.name,\r\n                    artist: data.artists,\r\n                    track_cover_art_url: data.album.images[1].url,\r\n                    preview_url: data.preview_url,\r\n                    duration_ms: data.duration_ms\r\n                })\r\n            }\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <Card>\r\n            <p><b>{this.state.title}</b></p>\r\n            <img src={this.state.track_cover_art_url} alt=\"album art\"></img>\r\n            <p>{this.state.duration_ms/1000/60}</p>\r\n            </Card>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track","import React, { Component } from 'react';\r\nimport Track from '../../Component/Track/Track'\r\nimport $ from 'jquery';\r\n/*\r\n\r\n    Taken Props:\r\n    token: Cors call requires the bearers token\r\n\r\n    To Do:\r\n    Make this tab prettier.\r\n    Otherwise looking good.\r\n    \r\n*/\r\n\r\nclass RecentlyPlayed extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            recents: null,\r\n            }\r\n    }\r\n    componentDidMount(){\r\n        //console.log(this.props.token);\r\n        this.getPrevData();\r\n    }\r\n    //call API to get data and sets to state\r\n    getPrevData(){\r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/player/recently-played\",\r\n            type: \"GET\",\r\n            beforeSend: (xhr) => {\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n            },\r\n            success: (data) => {\r\n                this.setState({\r\n                    recents: data.items,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // onHover={this.state.prev.track.preview_url}\r\n    getEachPrev(token){\r\n        const prevPlayed = this.state.recents ? (\r\n            this.state.recents.map(function(prev, index) {\r\n                return(                   \r\n                    <Track token={token} trackhref={prev.track.href} key={index}></Track>\r\n                )\r\n\r\n            })\r\n\r\n        ) : (\r\n            \r\n            <div> No Recent Replays </div>\r\n            \r\n        )\r\n\r\n        return prevPlayed;\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>Recently Played</h2>\r\n                {this.getEachPrev(this.props.token)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecentlyPlayed;","import React, {Component} from 'react';\r\n//import PlayListTrackList from '../PlayListTrackList/PlayListTrackList'\r\nimport $ from \"jquery\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n/*\r\n\r\n    Taken Props: \r\n    token: for Cors ajax call\r\n\r\n    To Do:\r\n    Create an actual framework for this component with PlayListTrackList\r\n    Will probably be rendered as a card with a drop down list \r\n\r\n*/\r\n\r\nclass Playlists extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            token: null,\r\n            playlists : null\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchPlaylists();\r\n    }\r\n\r\n    fetchPlaylists = () => {\r\n        // When the playlist tab is clicked, it will call an\r\n        // ajax call that gets playlists. \r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/playlists\",\r\n            type: \"GET\",\r\n            beforeSend: (xhr) => {\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n            },\r\n            success: (data) => {\r\n                    this.setState({\r\n                        token: this.props.token,\r\n                        playlists: data.items\r\n                    })\r\n                    //console.log(data.items);\r\n\r\n            }\r\n        });\r\n    }\r\n    \r\n    //Method to display yourplaylists.\r\n    //May need a ComponentWillUpdate method to call this.\r\n    //Need to assign a key value per every playlist render.\r\n    getCurrentState(){\r\n        const playlists = this.state.playlists ? (\r\n            this.state.playlists.map(function (playlist, index){\r\n                return(\r\n                    //name of playlist\r\n                    //playlist image\r\n                    //maybe playlist creator\r\n\r\n                    <Card key={index}>\r\n                    <CardHeader\r\n                        avatar={\r\n                        <Avatar aria-label=\"recipe\">\r\n                            <img href={playlist.images[0].url} alt=\"playlist art\"/>\r\n                        </Avatar>\r\n                        }\r\n                        action={\r\n                        <IconButton aria-label=\"settings\">\r\n                        </IconButton>\r\n                        }\r\n                        title={playlist.name}\r\n                        subheader={playlist.owner.display_name}\r\n                    />\r\n                    <CardMedia\r\n                        image={playlist.images[0].url}\r\n                        title={playlist.name}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {playlist.description}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    </Card>\r\n                    //<PlayListTrackList token={token} trackhref={playlist.tracks.href}></PlayListTrackList>\r\n                )\r\n        })\r\n    ) : (\r\n            \r\n                <div> No Playlists Found! </div>\r\n            \r\n        )\r\n        return playlists;\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Playlists</h1>\r\n                <ul>\r\n                    {this.getCurrentState(this.state.token)}\r\n                </ul>\r\n            </div>\r\n           )\r\n\r\n    }\r\n}\r\n\r\nexport default Playlists;","import React, {Component} from 'react';\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport './App.css';\r\n\r\nimport Navbar from './Component/Navbar'\r\nimport Player from './Component/Player/Player'\r\n\r\nimport User from './Pages/User/User'\r\nimport RecentlyPlayed from './Pages/RecentlyPlayed/RecentlyPlayed'\r\nimport Playlists from './Component/Playlist/Playlist'\r\n\r\n/* \r\n\r\n  To Do:\r\n  Create Launch Page implemented with login button.\r\n  Set up react dom router with nav.\r\n\r\n*/\r\n\r\nconst authEndpoint = 'https://accounts.spotify.com/authorize';\r\nconst clientId = \"9110bb9fbfc4422c85e722040cf63bc8\";\r\nconst redirectUri = \"https://shen-ui.github.io/Riffle/\";\r\n//const redirectUri = \"http://localhost:3000/Riffle\";\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-read-recently-played\",\r\n  \"user-read-private\",\r\n  \"user-read-email\",\r\n  \"streaming\"\r\n];\r\n\r\nconst hash = window.location.hash\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function(initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\nwindow.location.hash = \"\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      token: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Set token\r\n    let _token = hash.access_token;\r\n    if (_token) {\r\n      // Set token\r\n      this.setState({\r\n        token: _token\r\n      });\r\n    }\r\n  }\r\n  \r\n  render(){\r\n    \r\n    return (\r\n      \r\n        <BrowserRouter>\r\n          <div className=\"App\">\r\n            <header className=\"App-header\">\r\n            </header>\r\n              <Navbar token={this.state.token}>\r\n                <Route path=\"/playlists\">Playlists</Route>\r\n                <Route path=\"/about\">About</Route>\r\n                <Route path=\"/profile\">Profile</Route>\r\n              </Navbar>\r\n              \r\n              {!this.state.token && (\r\n                <div>\r\n                <p>Welcome to the alpha version of Riffle! Currently developing the main components of the web app with react.js.\r\n                My roadmap is consists of: <br/>\r\n                 1, Get full functionality and all react components created and functional.<br/>\r\n                 2. Setting up the react dom and routers to appropriate pages with components.<br/>\r\n                 3. Work on styling and choosing a better framework (Currently using material-ui so nothing is a complete eyesore).<br/>\r\n                <br/>\r\n                Login to see component developement!</p>\r\n                <a\r\n                  className=\"btn btn--loginApp-link center\"\r\n                  href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>\r\n                  Login to Spotify\r\n                </a>\r\n                </div>\r\n              )}\r\n              {this.state.token && (\r\n                \r\n                <div>\r\n                <Player token={this.state.token}/>\r\n                <User token={this.state.token}/>  \r\n                <Playlists token={this.state.token}/>\r\n                <RecentlyPlayed token={this.state.token}/>\r\n                \r\n                {\r\n                  //<Player token={this.state.token}></Player>\r\n                  //<User token={this.state.token}></User>\r\n                  //<RecentlyPlayed token={this.state.token}></RecentlyPlayed>\r\n                  //<Playlists token={this.state.token}></Playlists>\r\n                }\r\n                </div>\r\n              )}\r\n\r\n          </div>\r\n        </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}