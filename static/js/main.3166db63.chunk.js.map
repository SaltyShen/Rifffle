{"version":3,"sources":["logo.svg","Component/Track/Track.js","Pages/RecentlyPlayed.js","Pages/User.js","Component/Navbar/Navbar.js","Component/Buttons/PlayButton.js","Component/Player.js","Pages/Playlist.js","Pages/PlayerPane.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Track","state","title","artist","track_cover_art_url","preview_url","this","getTrackData","$","ajax","url","props","trackhref","type","cors","contentType","beforeSend","xhr","setRequestHeader","token","success","data","setState","name","artists","album","images","duration_ms","lastElement","length","map","i","className","src","alt","Component","RecentlyPlayed","recents","getPrevData","items","prev","index","track","href","key","style","listStyleType","getEachPrev","User","display_name","email","id","followers","profile_pic","product","getUserData","headers","total","fail","alert","navstyle","font","fontWeight","color","Navbar","background","left","right","top","logo","height","width","margin","to","playbutton","playToggle","play","IconButton","aria-label","onClick","pause","Player","item","is_playing","progress_ms","getPlayerDataCurrent","console","log","backgroundImage","boxShadow","marginTop","textAlign","PlayButton","Playlists","fetchPlaylists","playlists","playlist","Card","CardHeader","avatar","Avatar","action","subheader","owner","CardMedia","image","CardContent","Typography","variant","component","description","getCurrentState","PlayerPane","postion","Playlist","scopes","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","App","deviceId","_token","access_token","initPlayer","onSpotifyWebPlaybackSDKReady","player","Spotify","getOAuthToken","cb","addListener","message","error","device_id","connect","then","paddingTop","marginLeft","marginRight","icon","fontSize","join","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,oRCkF5BC,E,kDAnEX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,MAAO,KACPC,OAAQ,GACRC,oBAAqB,KACrBC,YAAa,MANR,E,gEAUTC,KAAKC,iB,qCAOO,IAAD,OACXC,IAAEC,KAAK,CACPC,IAAKJ,KAAKK,MAAMC,UAChBC,KAAM,MACNC,MAAM,EACNC,YAAY,mBACZC,WAAY,SAACC,GACTA,EAAIC,iBAAiB,gBAAiB,UAAY,EAAKP,MAAMQ,QAE7DC,QAAS,SAACC,GAGN,EAAKC,SAAS,CACVpB,MAAOmB,EAAKE,KACZpB,OAAQkB,EAAKG,QACbpB,oBAAqBiB,EAAKI,MAAMC,OAAO,GAAGhB,IAC1CL,YAAagB,EAAKhB,YAClBsB,YAAaN,EAAKM,mB,+BAO9B,IAAMC,EAActB,KAAKL,MAAME,OAAO0B,OAClCL,EAAUlB,KAAKL,MAAME,OAAO2B,KAAI,SAAS3B,EAAQ4B,GACjD,OAAIH,IAAgBG,EAAI,EACb,2BAAI5B,EAAM,MAGV,2BAAIA,EAAM,KAAW,SAIpC,OACI,wBAAI6B,UAAU,SACN,yBAAKA,UAAU,YACXC,IAAK3B,KAAKL,MAAMG,oBAChB8B,IAAI,cAER,yBAAKF,UAAU,cACX,uBAAGA,UAAU,cAAc1B,KAAKL,MAAMC,OACtC,uBAAG8B,UAAU,eAAeR,S,GA5DhCW,aC0DLC,E,kDAzDX,aAAc,IAAD,8BACT,gBACKnC,MAAQ,CACToC,QAAS,MAHJ,E,gEAQT/B,KAAKgC,gB,oCAGK,IAAD,OACT9B,IAAEC,KAAK,CACHC,IAAK,uDACLG,KAAM,MACNG,WAAY,SAACC,GACTA,EAAIC,iBAAiB,gBAAiB,UAAY,EAAKP,MAAMQ,QAEjEC,QAAS,SAACC,GACN,EAAKC,SAAS,CACVe,QAAShB,EAAKkB,a,kCAOlBpB,GAeR,OAdmBb,KAAKL,MAAMoC,QAC1B/B,KAAKL,MAAMoC,QAAQP,KAAI,SAASU,EAAMC,GAClC,OACI,kBAAC,EAAD,CAAOtB,MAAOA,EAAOP,UAAW4B,EAAKE,MAAMC,KAAMC,IAAKH,OAO9D,sD,+BAQJ,OACI,yBAAKT,UAAU,mBACX,+CACA,wBAAIa,MAAO,CAACC,cAAc,SACzBxC,KAAKyC,YAAYzC,KAAKK,MAAMQ,a,GAnDhBgB,aCyDda,E,kDAxDX,aAAc,IAAD,8BACT,gBACK/C,MAAQ,CACTgD,aAAc,KACdC,MAAO,KACPP,KAAM,KACNQ,GAAI,KACJC,UAAW,KACXC,YAAa,KACbC,QAAS,MATJ,E,gEAaThD,KAAKiD,gB,oCAEK,IAAD,OACT/C,IAAEC,KAAK,CACHC,IAAK,iCACL,eAAiB,mBACjB8C,QAAS,CACL,cAAkB,UAAYlD,KAAKK,MAAMQ,OAE7CN,KAAM,MACNO,QAAS,SAACC,GACN,EAAKC,SAAS,CACV4B,MAAO7B,EAAK6B,MACZD,aAAc5B,EAAK4B,aACnBN,KAAMtB,EAAKsB,KACXS,UAAW/B,EAAK+B,UAAUK,MAC1BN,GAAI9B,EAAK8B,GACTE,YAAahC,EAAKK,OAAO,GAAGhB,IAC5B4C,QAASjC,EAAKiC,WAGtBI,KAAM,WACFC,MAAM,kC,+BAOd,OACI,6BACA,oCAEA,yBAAK1B,IAAK3B,KAAKL,MAAMoD,YAAanB,IAAI,UACtC,2BAAG,iCAAH,KAAe5B,KAAKL,MAAMkD,IAC1B,2BAAG,sCAAH,KAAoB7C,KAAKL,MAAMqD,SAC/B,2BAAG,wCAAH,KAAsBhD,KAAKL,MAAMmD,gB,GAlD1BjB,aCPbyB,EAAW,CACbC,KAAK,iBACLC,WAAY,MACZC,MAAM,WA+BKC,EA5BA,WAEX,OAEQ,yBAAKhC,UAAU,cAAea,MAAO,CAAEoB,WAAY,UAAWC,KAAM,EAAGC,MAAM,EAAGC,IAAI,IAEhF,yBAAKnC,IAAKoC,IAAMrC,UAAU,gBAAgBE,IAAI,OAC9CW,MAAO,CACHyB,OAAO,MACPC,MAAO,MACPC,OAAQ,UAIZ,yBAAKxC,UAAU,aAEX,wBAAIA,UAAU,SACV,wBAAIa,MAASe,GAAU,kBAAC,IAAD,CAAOf,MAAO,CAACkB,MAAM,SAAUU,GAAG,WAAlC,WACvB,wBAAI5B,MAASe,GAAU,kBAAC,IAAD,CAAOf,MAAO,CAACkB,MAAM,SAAUU,GAAG,cAAlC,cACvB,wBAAI5B,MAASe,GAAU,kBAAC,IAAD,CAAOf,MAAO,CAACkB,MAAM,SAAUU,GAAG,YAAlC,gB,yBCmChCC,E,kDA7DX,WAAY/D,GAAO,IAAD,8BACd,cAAMA,IACDV,MAAQ,CACTkB,MAAO,EAAKR,MAAMQ,MAClBwD,YAAY,GAJF,E,qDAyDd,OAVsC,IAApBrE,KAAKL,MAAM2E,KACzB,kBAACC,EAAA,EAAD,CAAYC,aAAW,OAAOC,QAASzE,KAAKsE,MACxC,kBAAC,IAAD,OAGJ,kBAACC,EAAA,EAAD,CAAYC,aAAW,OAAOC,QAASzE,KAAK0E,Y,GArD/B7C,aCmHV8C,E,kDA1Gb,WAAYtE,GAAO,IAAD,8BAChB,cAAMA,IACDV,MAAQ,CACXkB,MAAO,EAAKR,MAAMQ,MAClB+D,KAAM,KACNC,WAAY,KACZC,YAAa,MAEf,EAAKC,uBARW,E,mEAWK,IAAD,OACpB7E,IAAEC,KAAK,CACLC,IAAK,wCACLG,KAAM,MACNG,WAAY,SAACC,GACXA,EAAIC,iBAAiB,gBAAiB,UAAY,EAAKP,MAAMQ,QAE/DC,QAAS,SAACC,GACFA,EAIF,EAAKC,SAAS,CACZ4D,KAAM7D,EAAK6D,KACXC,WAAY9D,EAAK8D,WACjBC,YAAa/D,EAAK+D,cANpBE,QAAQC,IAAI,+C,6CAeC,IAAD,OACpB/E,IAAEC,KAAK,CACLC,IAAK,yDACLG,KAAM,MACNG,WAAY,SAACC,GACXA,EAAIC,iBAAiB,gBAAiB,UAAY,EAAKP,MAAMQ,QAE/DC,QAAS,SAACC,GAERiE,QAAQC,IAAI,qBAAuBlE,GAEnC,EAAKC,SAAS,CACZ4D,KAAM7D,EAAK6D,KACXC,WAAY9D,EAAK8D,WACjBC,YAAa/D,EAAK+D,mB,+BAqDxB,OAxCgB9E,KAAKL,MAAMiF,KAEzB,yBAAKlD,UAAU,oBAEb,yBAAKA,UAAU,YACba,MAAO,CACL2C,gBAAiB,OAASlF,KAAKL,MAAMiF,KAAKzD,MAAMC,OAAO,GAAGhB,IAAM,IAChE4D,OAAOhE,KAAKL,MAAMiF,KAAKzD,MAAMC,OAAO,GAAG4C,OACvCC,MAAMjE,KAAKL,MAAMiF,KAAKzD,MAAMC,OAAO,GAAG6C,MACtCkB,UAAW,oBACXC,UAAU,MACVlB,OAAQ,WAGV,uBAAGxC,UAAU,aAAaa,MAAO,CAAC8C,UAAW,SAAU7B,WAAW,MAAOC,MAAM,UAAYzD,KAAKL,MAAMiF,KAAK3D,KAA3G,IAAkHjB,KAAKL,MAAMiF,KAAK1D,QAAQ,GAAGD,MAC7I,uBAAGS,UAAU,mBAAmBa,MAAO,CAAC8C,UAAW,WAAYrF,KAAKL,MAAMiF,KAAKzD,MAAMF,MACrF,kBAACqE,EAAD,CAAYzE,MAASb,KAAKL,MAAMkB,QAChC,uBAAG0B,MAAO,CAAC8C,UAAW,WAAW,oCAAjC,IAA+CrF,KAAKL,MAAMmF,eAO9D,yBAAKpD,UAAU,+BACb,yBAAKA,UAAU,cACVa,MAAS,CACP2B,OAAQ,SACRkB,UAAW,MACXpB,OAAQ,QACRC,MAAO,QACPkB,UAAW,oBACXxB,WAAY,YAEjB,kBAAC2B,EAAD,CAAYzE,MAAOb,KAAKK,MAAMQ,c,GAjGnBgB,a,gDCoGN0D,E,kDAzFX,WAAYlF,GAAO,IAAD,8BACd,cAAMA,IAUVmF,eAAiB,WAGbtF,IAAEC,KAAK,CACHC,IAAK,0CACLG,KAAM,MACNG,WAAY,SAACC,GACbA,EAAIC,iBAAiB,gBAAiB,UAAY,EAAKP,MAAMQ,QAE7DC,QAAS,SAACC,GACF,EAAKC,SAAS,CACVH,MAAO,EAAKR,MAAMQ,MAClB4E,UAAW1E,EAAKkB,YArBhC,EAAKtC,MAAQ,CACTkB,MAAO,KACP4E,UAAY,MAJF,E,gEAQdzF,KAAKwF,mB,wCAkEL,OAvCkBxF,KAAKL,MAAM8F,UACzBzF,KAAKL,MAAM8F,UAAUjE,KAAI,SAAUkE,EAAUvD,GACzC,OAKI,kBAACwD,EAAA,EAAD,CAAMrD,IAAKH,GACX,kBAACyD,EAAA,EAAD,CACIC,OACA,kBAACC,EAAA,EAAD,CAAQtB,aAAW,UACf,yBAAKnC,KAAMqD,EAAStE,OAAO,GAAGhB,IAAKwB,IAAI,kBAG3CmE,OACA,kBAACxB,EAAA,EAAD,CAAYC,aAAW,aAGvB5E,MAAO8F,EAASzE,KAChB+E,UAAWN,EAASO,MAAMtD,eAE9B,kBAACuD,EAAA,EAAD,CACIC,MAAOT,EAAStE,OAAO,GAAGhB,IAC1BR,MAAO8F,EAASzE,OAEpB,kBAACmF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQ7C,MAAM,gBAAgB8C,UAAU,KAC3Db,EAASc,kBASlB,wD,+BAMR,OACI,6BACI,yCACA,4BACKxG,KAAKyG,gBAAgBzG,KAAKL,MAAMkB,a,GAlF7BgB,aCyCT6E,E,kDA3Cb,WAAYrG,GAAQ,IAAD,8BACjB,cAAMA,IACDV,MAAQ,CACXkB,MAAO,EAAKR,MAAMQ,OAHH,E,qDASjB,OAEI,kBAAC,IAAD,KACE,yBAAKa,UAAU,MACVa,MAAS,CACPoB,WAAY,UACZK,OAAQ,UAEb,4BAAQtC,UAAU,eAEhB,kBAAC,EAAD,CAAQb,MAAOb,KAAKL,MAAMkB,QAIxB,yBAAK0B,MAAO,CAACoE,QAAQ,QAAS7C,IAAI,MAElC,kBAAC,EAAD,CAAQjD,MAAOb,KAAKL,MAAMkB,QAC1B,kBAAC,EAAD,CAAMA,MAAOb,KAAKL,MAAMkB,QACxB,kBAAC,EAAD,CAAgBA,MAAOb,KAAKL,MAAMkB,QAClC,kBAAC+F,EAAD,CAAW/F,MAAOb,KAAKL,MAAMkB,e,GA7BpBgB,aCXnBgF,EAAS,CACb,8BACA,2BACA,4BACA,oBACA,kBACA,aAGIC,EAAOC,OAAOC,SAASF,KAC1BG,UAAU,GACVC,MAAM,KACNC,QAAO,SAASC,EAASxC,GACxB,GAAIA,EAAM,CACR,IAAIyC,EAAQzC,EAAKsC,MAAM,KACvBE,EAAQC,EAAM,IAAMC,mBAAmBD,EAAM,IAE/C,OAAOD,IACN,IACLL,OAAOC,SAASF,KAAO,G,IAEFS,E,kDACjB,aAAc,IAAD,8BACX,gBAES5H,MAAQ,CACXkB,MAAO,KACP2G,SAAU,IALL,E,gEAWT,IAAIC,EAASX,EAAKY,aACdD,GAGFzH,KAAKgB,SAAS,CACZH,MAAO4G,IAGfzH,KAAK2H,e,mCAEQ,IAAD,OACVZ,OAAOa,6BAA+B,WACpC,IAAM/G,EAAQ,EAAKlB,MAAMkB,MACnBgH,EAAS,IAAId,OAAOe,QAAQnD,OAAO,CACvC1D,KAAM,gBACN8G,cAAe,SAAAC,GAAQA,EAAGnH,MAI5BgH,EAAOI,YAAY,wBAAwB,YAAkB,IAAfC,EAAc,EAAdA,QAAgBlD,QAAQmD,MAAMD,MAC5EL,EAAOI,YAAY,wBAAwB,YAAkB,IAAfC,EAAc,EAAdA,QAAgBlD,QAAQmD,MAAMD,MAC5EL,EAAOI,YAAY,iBAAiB,YAAkB,IAAfC,EAAc,EAAdA,QAAgBlD,QAAQmD,MAAMD,MACrEL,EAAOI,YAAY,kBAAkB,YAAkB,IAAfC,EAAc,EAAdA,QAAgBlD,QAAQmD,MAAMD,MAGtEL,EAAOI,YAAY,wBAAwB,SAAAtI,GAAWqF,QAAQC,IAAItF,MAGlEkI,EAAOI,YAAY,SAAS,YAAoB,IAAjBG,EAAgB,EAAhBA,UAC7BpD,QAAQC,IAAI,uBAAwBmD,MAItCP,EAAOI,YAAY,aAAa,YAAoB,IAAjBG,EAAgB,EAAhBA,UACjCpD,QAAQC,IAAI,6BAA8BmD,MAI5CP,EAAOQ,UAAUC,MAAK,SAAAxH,GACjBA,GACDkE,QAAQC,IAAI,2B,+BAQhB,OAEI,yBAAKvD,UAAU,eACX1B,KAAKL,MAAMkB,OAEb,yBAAKa,UAAU,WACVa,MAAO,CACLgG,WAAW,OACXC,WAAW,OACXC,YAAY,MACZzE,OAAO,UAGd,iCACE,yBAAKrC,IAAK+G,IACNnG,MAAO,CACLyB,OAAO,OACPC,MAAM,QAERrC,IAAI,SAGR,wBAAIW,MAAO,CAACiB,WAAW,OAAQmF,SAAS,OAAOpF,KAAK,mBAApD,8BAKA,uBAAGhB,MAAO,CAACiB,WAAW,MAAMD,KAAM,iBAAiBoF,SAAS,SAA5D,6CAC4C,6BAD5C,2CAKA,uBAAGpG,MAAO,CAACiB,WAAW,MAAOD,KAAK,iBAAkBE,MAAM,SAA1D,wBAMF,uBACE/B,UAAU,MACVa,MAAO,CAAC6C,UAAU,OAAQoD,WAAY,KAAMhF,WAAW,OACvDnB,KAAI,UA/HC,yCA+HD,sBA9HH,mCA8HG,yBA5HA,+BA4HA,kBAA6EwE,EAAO+B,KAAK,OAAzF,0CAHN,uBAUC5I,KAAKL,MAAMkB,OACV,kBAAC,EAAD,CAAYA,MAAOb,KAAKL,MAAMkB,a,GA7GbgB,aClB3BgH,EAAcC,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTZ,MAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9J,QACfyJ,UAAUC,cAAcO,YAI1B5E,QAAQC,IACN,iHAKEkE,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBvE,QAAQC,IAAI,sCAGRkE,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAA5B,GACLnD,QAAQmD,MAAM,4CAA6CA,MC1FjE6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,UAAwBvD,OAAOC,SAAS3E,MACpDkI,SAAWxD,OAAOC,SAASuD,OAIvC,OAGFxD,OAAOyD,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,UAAN,sBAEPzB,IAgEV,SAAiCK,EAAOC,GAEtCsB,MAAMvB,EAAO,CACXhG,QAAS,CAAE,iBAAkB,YAE5BoF,MAAK,SAAAoC,GAEJ,IAAMjK,EAAciK,EAASxH,QAAQyH,IAAI,gBAEnB,MAApBD,EAASE,QACO,MAAfnK,IAA8D,IAAvCA,EAAYoK,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAMxC,MAAK,SAAAiB,GACjCA,EAAawB,aAAazC,MAAK,WAC7BvB,OAAOC,SAASgE,eAKpB/B,EAAgBC,EAAOC,MAG1BY,OAAM,WACL/E,QAAQC,IACN,oEAvFAgG,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAMxC,MAAK,WACjCtD,QAAQC,IACN,iHAMJgE,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.3166db63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bf2c47e6.svg\";","import React, {Component} from 'react';\r\nimport './track.css'\r\nimport $ from 'jquery';\r\n/* \r\n\r\n    Takes Props:\r\n    token: Cors call requires the bearers token\r\n    trackhref: FULL href to the track ID \r\n\r\n    To Do:\r\n    Implement a play button that sends the song to current play state.\r\n    Make this component prettier.\r\n    \r\n  */\r\nclass Track extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            title: null,\r\n            artist: [],\r\n            track_cover_art_url: null,\r\n            preview_url: null,\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.getTrackData();\r\n    }\r\n    \r\n    //build url with trackID\r\n    //build the url first\r\n\r\n    //AJAX call to get data from spotify API with cors\r\n    getTrackData() {\r\n        $.ajax({\r\n        url: this.props.trackhref,\r\n        type: \"GET\",\r\n        cors: true,\r\n        contentType:'application/json',\r\n        beforeSend: (xhr) => {\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n        },\r\n            success: (data) => {\r\n                //log for diagnostic\r\n                //console.log(data);\r\n                this.setState({\r\n                    title: data.name,\r\n                    artist: data.artists,\r\n                    track_cover_art_url: data.album.images[1].url,\r\n                    preview_url: data.preview_url,\r\n                    duration_ms: data.duration_ms\r\n                })\r\n            }\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        const lastElement = this.state.artist.length;\r\n        var artists = this.state.artist.map(function(artist, i){\r\n            if (lastElement === i + 1){\r\n                return(<b>{artist['name']}</b>);\r\n            }\r\n            else{\r\n                return(<b>{artist['name'] + \", \"}</b>);\r\n            }\r\n        });\r\n\r\n        return(\r\n            <li className=\"track\">\r\n                    <img className=\"album-art\" \r\n                        src={this.state.track_cover_art_url} \r\n                        alt=\"album art\"\r\n                    />  \r\n                    <div className=\"descriptor\">\r\n                        <p className=\"song-title\">{this.state.title}</p>\r\n                        <p className=\"song-artist\">{artists}</p>\r\n                    </div>\r\n            </li>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track","import React, { Component } from 'react';\r\nimport Track from '../Component/Track/Track';\r\nimport $ from 'jquery';\r\n/*\r\n\r\n    Taken Props:\r\n    token: Cors call requires the bearers token\r\n\r\n    To Do:\r\n    Make this tab prettier.\r\n    Otherwise looking good.\r\n    \r\n*/\r\n\r\nclass RecentlyPlayed extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            recents: null,\r\n            }\r\n    }\r\n    componentDidMount(){\r\n        //console.log(this.props.token);\r\n        this.getPrevData();\r\n    }\r\n    //call API to get data and sets to state\r\n    getPrevData(){\r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/player/recently-played\",\r\n            type: \"GET\",\r\n            beforeSend: (xhr) => {\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n            },\r\n            success: (data) => {\r\n                this.setState({\r\n                    recents: data.items,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // onHover={this.state.prev.track.preview_url}\r\n    getEachPrev(token){\r\n        const prevPlayed = this.state.recents ? (\r\n            this.state.recents.map(function(prev, index) {\r\n                return(                   \r\n                    <Track token={token} trackhref={prev.track.href} key={index}></Track>\r\n                )\r\n\r\n            })\r\n\r\n        ) : (\r\n            \r\n            <div> No Recent Replays </div>\r\n            \r\n        )\r\n\r\n        return prevPlayed;\r\n    };\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"recently-played\">\r\n                <h4>Recently Played</h4>\r\n                <ul style={{listStyleType:\"none\"}}>\r\n                {this.getEachPrev(this.props.token)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecentlyPlayed;","import React, {Component} from 'react';\r\nimport $ from 'jquery';\r\n\r\n/*\r\n\r\n    Taken Props:\r\n        token: for cors jquery call\r\n\r\n    To Do:\r\n    implement a good framework\r\n    Will most likely be put into navbar with a drop down box that lets you see your profile and then go into a settings page if button \"settings\" is clicked.\r\n\r\n*/\r\n\r\nclass User extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            display_name: null,\r\n            email: null,\r\n            href: null, \r\n            id: null,\r\n            followers: null,\r\n            profile_pic: null,\r\n            product: null\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.getUserData();\r\n    }\r\n    getUserData(){\r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/\",\r\n            'Content-Type' : 'application/json',\r\n            headers: {\r\n                'Authorization' : 'Bearer ' + this.props.token\r\n            },\r\n            type: \"GET\",\r\n            success: (data) => {        \r\n                this.setState({\r\n                    email: data.email,\r\n                    display_name: data.display_name,\r\n                    href: data.href,\r\n                    followers: data.followers.total,\r\n                    id: data.id,\r\n                    profile_pic: data.images[0].url,\r\n                    product: data.product\r\n                });\r\n            },\r\n            fail: () => {\r\n                alert(\"API Playlist call failed.\");\r\n            } \r\n            \r\n        })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n            <h1>User</h1>\r\n\r\n            <img src={this.state.profile_pic} alt=\"pfpic\"></img>\r\n            <p><b>ID</b>: {this.state.id}</p>\r\n            <p><b>PRODUCT</b>: {this.state.product}</p>\r\n            <p><b>FOLLOWERS</b>: {this.state.followers}</p>\r\n            \r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport {Link as Route} from '@material-ui/core';\r\n\r\nimport logo from '../../logo.svg'\r\nimport './navbar.css'\r\nimport RecentlyPlayed from '../../Pages/RecentlyPlayed.js'\r\nimport User from '../../Pages/User.js'\r\nconst navstyle = {\r\n    font:\"Circular,arial\",\r\n    fontWeight: \"600\",\r\n    color:\"#FFFFFF\"\r\n};\r\n\r\nconst Navbar = () => {\r\n    \r\n    return(\r\n        \r\n            <nav className=\"nav-wrapper\"  style={{ background: '#1DB954', left: 0, right:0, top:0 }}>\r\n                \r\n                <img src={logo} className=\"App-logo left\" alt=\"logo\" \r\n                style={{\r\n                    height:\"5vh\",\r\n                    width: \"5vw\",\r\n                    margin: \"10px\"\r\n\r\n                }}></img>\r\n\r\n                <div className=\"container\">\r\n                    \r\n                    <ul className=\"right\" >\r\n                        <li style = {navstyle}><Route style={{color:\"white\"}} to=\"/Player\" >PLAYER</Route></li>\r\n                        <li style = {navstyle}><Route style={{color:\"white\"}} to=\"/playlists\">PLAYLISTS</Route></li>\r\n                        <li style = {navstyle}><Route style={{color:\"white\"}} to=\"/profile\">PROFILE</Route></li>\r\n                    </ul>\r\n\r\n                </div>\r\n            </nav>\r\n            \r\n\r\n    )\r\n}\r\nexport default Navbar;","import React, {Component} from 'react';\r\n//import $ from 'jquery';\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport PlayIcon from \"@material-ui/icons/PlayArrow\"\r\n\r\nclass playbutton extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            token: this.props.token,\r\n            playToggle: false\r\n        }\r\n    }\r\n\r\n    /*play(){\r\n        function handleClick(e){\r\n            $.ajax({\r\n                url: \"https://api.spotify.com/v1/me/player/play\",\r\n                beforeSend: (xhr) => {\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n                },\r\n                success: () => {\r\n                        console.log('play: success!');\r\n                        this.setState({\r\n                            playToggle: true\r\n                        })\r\n                }\r\n            });\r\n        }\r\n    }\r\n    pause(){\r\n        function handleClick(e){\r\n            $.ajax({\r\n                url: \"https://api.spotify.com/v1/me/player/pause\",\r\n                beforeSend: (xhr) => {\r\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n                },\r\n                success: () => {\r\n                        console.log('pause: success!');\r\n                        this.setState({\r\n                            playToggle:false\r\n                        })\r\n\r\n                }\r\n            });\r\n        }\r\n    }\r\n    */\r\n\r\n    \r\n\r\n    render(){\r\n\r\n        var playButton = (this.state.play === false) ? (\r\n            <IconButton aria-label=\"Play\" onClick={this.play}>\r\n                <PlayIcon />\r\n            </IconButton>\r\n          ) : (\r\n            <IconButton aria-label=\"Play\" onClick={this.pause}>\r\n\r\n            </IconButton>\r\n          )\r\n\r\n        return(playButton);\r\n    }\r\n};\r\n\r\nexport default playbutton;\r\n","import React, { Component } from 'react';\r\nimport $ from \"jquery\";\r\nimport PlayButton from \"./Buttons/PlayButton\"\r\n\r\n/* \r\nThis is the main interface for music control.\r\nchild components are: \r\n  PlayButton\r\n  PauseButton\r\n  ForwardButton\r\n  PrevButton\r\n\r\n*/\r\nclass Player extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      token: this.props.token,\r\n      item: null,\r\n      is_playing: null,\r\n      progress_ms: null\r\n    }\r\n    this.getPlayerDataCurrent();\r\n  }\r\n\r\n  getPlayerDataCurrent(){\r\n    $.ajax({\r\n      url: \"https://api.spotify.com/v1/me/player/\",\r\n      type: \"GET\",\r\n      beforeSend: (xhr) => {\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n      },\r\n      success: (data) => {\r\n          if(!data){\r\n            console.log(\"Nothing Playing, try playing something\")\r\n          }\r\n          else{\r\n            this.setState({\r\n              item: data.item,\r\n              is_playing: data.is_playing,\r\n              progress_ms: data.progress_ms\r\n              \r\n            });\r\n          }\r\n          //console.log(\"actual ajax call: \" + data);\r\n      }\r\n    });\r\n  }\r\n\r\n  getPlayerDataContext(){\r\n    $.ajax({\r\n      url: \"https://api.spotify.com/v1/me/player/currently-playing\",\r\n      type: \"GET\",\r\n      beforeSend: (xhr) => {\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n      },\r\n      success: (data) => {\r\n\r\n        console.log(\"actual ajax call: \" + data);\r\n        \r\n        this.setState({\r\n          item: data.item,\r\n          is_playing: data.is_playing,\r\n          progress_ms: data.progress_ms\r\n        });\r\n      \r\n      }\r\n\r\n    });\r\n  }\r\n  \r\n  render(){\r\n    // Rendering will cause an error pre-flight\r\n    // ternary operator to handle null error\r\n    // Need to add Buttons and controls to connect to playbacksdk\r\n    //var coverArtURL = this.state.item.album.images[1].url;\r\n    const player = (this.state.item) ? (\r\n    \r\n      <div className=\"player-interface\">\r\n\r\n        <div className=\"cover-art\" \r\n          style={{\r\n            backgroundImage: \"url(\" + this.state.item.album.images[1].url + \")\",\r\n            height:this.state.item.album.images[1].height, \r\n            width:this.state.item.album.images[1].width,\r\n            boxShadow: \"1px 3px 1px black\",\r\n            marginTop:\"10%\",\r\n            margin: \"0 auto\"\r\n          }}>\r\n\r\n          <p className=\"track-name\" style={{textAlign: \"center\", fontWeight:\"700\", color:\"Black\" }}>{this.state.item.name} {this.state.item.artists[0].name}</p>\r\n          <p className=\"track-album-name\" style={{textAlign: \"center\"}}>{this.state.item.album.name}</p>\r\n          <PlayButton token = {this.state.token}/>\r\n          <p style={{textAlign: \"center\"}}><b>prog:</b> {this.state.progress_ms}</p>\r\n\r\n        </div>\r\n      </div>\r\n\r\n    ) : (\r\n\r\n      <div className=\"player-interface-notplaying\">\r\n        <div className=\"empty-cover\"\r\n             style = {{\r\n               margin: \"0 auto\",\r\n               marginTop: \"10%\",\r\n               height: \"300px\",\r\n               width: \"295px\",\r\n               boxShadow: \"2px 3px 2px black\",\r\n               background: \"#121212\"\r\n             }}>\r\n          <PlayButton token={this.props.token}/>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n\r\n    return (player);\r\n  }\r\n}\r\n\r\nexport default Player;","import React, {Component} from 'react';\r\n//import PlayListTrackList from '../PlayListTrackList/PlayListTrackList'\r\nimport $ from \"jquery\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n/*\r\n\r\n    Taken Props: \r\n    token: for Cors ajax call\r\n\r\n    To Do:\r\n    Create an actual framework for this component with PlayListTrackList\r\n    Will probably be rendered as a card with a drop down list \r\n\r\n*/\r\n\r\nclass Playlists extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            token: null,\r\n            playlists : null\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchPlaylists();\r\n    }\r\n\r\n    fetchPlaylists = () => {\r\n        // When the playlist tab is clicked, it will call an\r\n        // ajax call that gets playlists. \r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/playlists\",\r\n            type: \"GET\",\r\n            beforeSend: (xhr) => {\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n            },\r\n            success: (data) => {\r\n                    this.setState({\r\n                        token: this.props.token,\r\n                        playlists: data.items\r\n                    })\r\n                    //console.log(data.items);\r\n\r\n            }\r\n        });\r\n    }\r\n    \r\n    //Method to display yourplaylists.\r\n    //May need a ComponentWillUpdate method to call this.\r\n    //Need to assign a key value per every playlist render.\r\n    getCurrentState(){\r\n        const playlists = this.state.playlists ? (\r\n            this.state.playlists.map(function (playlist, index){\r\n                return(\r\n                    //name of playlist\r\n                    //playlist image\r\n                    //maybe playlist creator\r\n\r\n                    <Card key={index}>\r\n                    <CardHeader\r\n                        avatar={\r\n                        <Avatar aria-label=\"recipe\">\r\n                            <img href={playlist.images[0].url} alt=\"playlist art\"/>\r\n                        </Avatar>\r\n                        }\r\n                        action={\r\n                        <IconButton aria-label=\"settings\">\r\n                        </IconButton>\r\n                        }\r\n                        title={playlist.name}\r\n                        subheader={playlist.owner.display_name}\r\n                    />\r\n                    <CardMedia\r\n                        image={playlist.images[0].url}\r\n                        title={playlist.name}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {playlist.description}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    </Card>\r\n                    //<PlayListTrackList token={token} trackhref={playlist.tracks.href}></PlayListTrackList>\r\n                )\r\n        })\r\n    ) : (\r\n            \r\n                <div> No Playlists Found! </div>\r\n            \r\n        )\r\n        return playlists;\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Playlists</h1>\r\n                <ul>\r\n                    {this.getCurrentState(this.state.token)}\r\n                </ul>\r\n            </div>\r\n           )\r\n\r\n    }\r\n}\r\n\r\nexport default Playlists;","import React, {Component} from 'react';\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\n\r\nimport Navbar from '../Component/Navbar/Navbar.js'\r\n\r\n\r\nimport Player from '../Component/Player'\r\nimport Playlists from './Playlist'\r\nimport RecentlyPlayed from './RecentlyPlayed'\r\nimport User from './User'\r\n\r\n\r\n/* \r\n\r\n  To Do:\r\n  Create Launch Page implemented with login button.\r\n  Set up react dom router with nav.\r\n\r\n*/\r\n\r\nclass PlayerPane extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      token: this.props.token\r\n    }\r\n  }\r\n  \r\n  render(){\r\n    \r\n    return (\r\n      \r\n        <BrowserRouter>\r\n          <div className=\"App\"\r\n               style = {{\r\n                 background: \"#212121\",\r\n                 height: \"100vh\"\r\n               }}>\r\n            <header className=\"App-header\">\r\n            </header>\r\n              <Navbar token={this.state.token}>\r\n\r\n              </Navbar>\r\n                \r\n                <div style={{postion:\"fixed\", top:\"0\"}}>\r\n\r\n                <Player token={this.state.token}/>\r\n                <User token={this.state.token}></User>\r\n                <RecentlyPlayed token={this.state.token}></RecentlyPlayed>\r\n                <Playlists token={this.state.token}></Playlists>\r\n                {\r\n                  //<Player token={this.state.token}></Player>\r\n                  //<User token={this.state.token}></User>\r\n                  //<RecentlyPlayed token={this.state.token}></RecentlyPlayed>\r\n                  //<Playlists token={this.state.token}></Playlists>\r\n                }\r\n\r\n                </div>\r\n          </div>\r\n        </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PlayerPane;","import React, { Component } from 'react';\r\nimport PlayerPane from './Pages/PlayerPane.js'\r\nimport icon from './logo.svg';\r\n\r\nconst authEndpoint = 'https://accounts.spotify.com/authorize';\r\nconst clientId = \"9110bb9fbfc4422c85e722040cf63bc8\";\r\n//const redirectUri = \"https://shen-ui.github.io/Riffle/\";\r\nconst redirectUri = \"http://localhost:3000/Riffle\";\r\n\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n  \"user-read-recently-played\",\r\n  \"user-read-private\",\r\n  \"user-read-email\",\r\n  \"streaming\"\r\n];\r\n\r\nconst hash = window.location.hash\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function(initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\nwindow.location.hash = \"\";\r\n//----------------CLASS------------------//\r\nexport default class App extends Component {\r\n    constructor(){\r\n      super();\r\n\r\n          this.state = {\r\n            token: null,\r\n            deviceId: ''\r\n        \r\n      }\r\n    }\r\n    componentDidMount() {\r\n        // Set token\r\n        let _token = hash.access_token;\r\n        if (_token) {\r\n          // Set token\r\n          \r\n          this.setState({\r\n            token: _token\r\n          });\r\n        }\r\n    this.initPlayer();\r\n    }\r\n    initPlayer(){\r\n      window.onSpotifyWebPlaybackSDKReady = () => {\r\n        const token = this.state.token;\r\n        const player = new window.Spotify.Player({\r\n          name: 'Riffle Player',\r\n          getOAuthToken: cb => { cb(token); }\r\n        });\r\n      \r\n        // Error handling\r\n        player.addListener('initialization_error', ({ message }) => { console.error(message); });\r\n        player.addListener('authentication_error', ({ message }) => { console.error(message); });\r\n        player.addListener('account_error', ({ message }) => { console.error(message); });\r\n        player.addListener('playback_error', ({ message }) => { console.error(message); });\r\n      \r\n        // Playback status updates\r\n        player.addListener('player_state_changed', state => { console.log(state); });\r\n      \r\n        // Ready\r\n        player.addListener('ready', ({ device_id }) => {\r\n          console.log('Ready with Device ID', device_id);\r\n        });\r\n      \r\n        // Not Ready\r\n        player.addListener('not_ready', ({ device_id }) => {\r\n          console.log('Device ID has gone offline', device_id);\r\n        });\r\n      \r\n        // Connect to the player!\r\n        player.connect().then(success =>{\r\n          if(success) {\r\n            console.log(\"Player connected!\")\r\n          }\r\n        });\r\n      };\r\n    }\r\n    render(){\r\n\r\n\r\n        return(\r\n          \r\n            <div className=\"login-pane\">\r\n              {!this.state.token && (\r\n              \r\n              <div className=\"loginbox\" \r\n                   style={{\r\n                     paddingTop:\"25vh\", \r\n                     marginLeft:\"10vw\", \r\n                     marginRight:\"0vw\", \r\n                     height:\"100vh\"\r\n                  }}>\r\n    \r\n              <article>\r\n                <img src={icon} \r\n                    style={{\r\n                      height:\"40px\", \r\n                      width:\"40px\"\r\n                    }}\r\n                    alt=\"icon\"\r\n                />\r\n\r\n                <h4 style={{fontWeight:\"bold\" ,fontSize:\"20px\",font:\"Circular,arial\"}}>\r\n                  Riffle Collabrative Player \r\n                  \r\n                </h4>\r\n\r\n                <p style={{fontWeight:\"400\",font: \"Circular,ariel\",fontSize:\"17px\"}}> \r\n                  A fullstack project created by Peter Wang.<br/> \r\n                  Create memorable playlists with anyone.\r\n                  </p>\r\n\r\n                <p style={{fontWeight:\"100\", font:\"Circular,arial\", color:\"grey\"}}> \r\n                  Powered by Spotify.\r\n                  </p>\r\n               \r\n              \r\n              </article>\r\n              <a\r\n                className=\"btn\"\r\n                style={{marginTop:\"20px\", marginLeft: \"5%\", fontWeight:\"400\"}}\r\n                href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>\r\n                Login with Spotify\r\n              </a>\r\n              </div>\r\n\r\n              )}\r\n\r\n              {this.state.token && (\r\n                <PlayerPane token={this.state.token}/>\r\n              )\r\n            }\r\n          </div>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}