{"version":3,"sources":["logo.svg","Component/Navbar.js","Component/Player/Player.js","Pages/User/User.js","Pages/Playlist/playlist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","style","background","src","logo","alt","Link","to","Player","state","item","album","artists","song_name","song_uri","is_playing","progress_ms","this","getPlayerData","$","ajax","url","type","beforeSend","xhr","setRequestHeader","props","token","success","data","setState","name","uri","images","Component","User","display_name","email","href","id","followers","product","headers","console","log","total","fail","alert","playlists","fetchPlaylists","items","map","playlist","getCurrentState","scopes","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","App","_token","access_token","join","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30bcec09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bf2c47e6.svg\";","import React from 'react';\r\nimport {Link} from '@material-ui/core';\r\n\r\nimport logo from '../logo.svg'\r\n\r\nconst Navbar = () => {\r\n\r\n    return(\r\n\r\n        \r\n            <nav className=\"nav-wrapper\"  style={{ background: '#1DB954' }}>\r\n            <img src={logo} className=\"App-logo left\" alt=\"logo\"></img>\r\n                <div className=\"container\">\r\n                    \r\n                    <ul className=\"right\">\r\n                        <li><Link className=\"nav-tabs\" to=\"/home\">Home</Link></li>\r\n                        <li><Link className=\"nav-tabs\" to=\"/playlists\">Playlists</Link></li>\r\n                        <li><Link className=\"nav-tabs\" to=\"/about\">About</Link></li>\r\n                        <li><Link className=\"nav-tabs\" to=\"/profile\">Profile</Link></li>\r\n                    </ul>\r\n\r\n                </div>\r\n            </nav>\r\n\r\n    )\r\n}\r\nexport default Navbar;","import React, {Component} from \"react\";\r\nimport $ from \"jquery\";\r\nimport \"./Player.css\";\r\n// NOTE: This ajax call to the Spotify API returns:\r\n// ALBUM(object), Playing(Bool), Progress (Int) \r\nclass Player extends Component {\r\n\r\n  state = {\r\n    item: null,\r\n    album: null,\r\n    artists: null,\r\n    song_name: null,\r\n    song_uri: null,\r\n    is_playing: null,\r\n    progress_ms: null\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getPlayerData();\r\n    \r\n  }\r\n\r\n  getPlayerData(){\r\n    $.ajax({\r\n      url: \"https://api.spotify.com/v1/me/player\",\r\n      type: \"GET\",\r\n      beforeSend: (xhr) => {\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n      },\r\n      success: (data) => {\r\n        if(!data){\r\n          return;\r\n        }\r\n        this.setState({\r\n          item: data.item,\r\n          album: data.item.album,\r\n          artists: data.item.artists,\r\n          song_name: data.item.name,\r\n          song_uri: data.item.uri,\r\n          is_playing: data.is_playing,\r\n          progress_ms: data.progress_ms,\r\n        });\r\n        \r\n      }\r\n    });\r\n  }\r\n  \r\n  render(){\r\n    \r\n    // Rendering will cause an error pre-flight\r\n    // ternary operator to handle null error\r\n    // Need to add Buttons and controls to connect to playbacksdk\r\n    var player = (this.state.item != null) ? (\r\n      <div>\r\n        <h1>Currently Playing</h1>\r\n        <p>Title: {this.state.song_name}</p>\r\n        <p>Album: {this.state.album.name}</p>\r\n        <img src={this.state.album.images[1].url}></img>\r\n\r\n      </div>\r\n    ) : (\r\n      <h1>Nothing Playing</h1>\r\n    )\r\n\r\n    return (player);\r\n  }\r\n}\r\n\r\nexport default Player;","import React, {Component} from 'react';\r\nimport $ from 'jquery';\r\n\r\n\r\nclass User extends Component {\r\n    componentDidMount(){\r\n\r\n            $.ajax({\r\n                type: \"GET\",\r\n                url: \"https://api.spotify.com/v1/me/\",\r\n                'Content-Type' : 'application/json',\r\n                headers: {\r\n                    'Authorization' : 'Bearer ' + this.props.token\r\n                },\r\n                success: (data) => {\r\n                    console.log(data);\r\n                    \r\n                    this.setState({\r\n                        email: data.email,\r\n                        display_name: data.display_name,\r\n                        href: data.href,\r\n                        followers: data.followers.total,\r\n                        id: data.id,\r\n                        images: data.images.url,\r\n                        product: data.product\r\n\r\n                    });\r\n                    console.log(this.state.images); \r\n                },\r\n                fail: () => {\r\n                    alert(\"API Playlist call failed.\");\r\n                } \r\n                \r\n            })\r\n    }\r\n\r\n    state = {\r\n        display_name: null,\r\n        email: null,\r\n        href: null, \r\n        id: null,\r\n        followers: null,\r\n        images: null,\r\n        product: null\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <h1>User</h1>\r\n\r\n            <p><b>TOKEN</b>: {this.props.token}</p>\r\n            <p><b>EMAIL</b>: {this.state.email}</p>\r\n            <p><b>PROFILE HREF</b>: {this.state.href}</p>\r\n            <p><b>ID</b>: {this.state.id}</p>\r\n            <p><b>PRODUCT</b>: {this.state.product}</p>\r\n            <p><b>FOLLOWERS</b>: {this.state.followers}</p>\r\n            <p className=\"profile-picture\"><b>Profile Picture</b>: </p>\r\n            </div>\r\n\r\n        )\r\n    }   \r\n}\r\n\r\nexport default User;","import React, {Component} from 'react';\r\nimport $ from \"jquery\";\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\nclass playlists extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            playlists : null\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchPlaylists();\r\n    }\r\n\r\n    fetchPlaylists = () => {\r\n        // When the playlist tab is clicked, it will call an\r\n        // ajax call that gets playlists. \r\n        $.ajax({\r\n            url: \"https://api.spotify.com/v1/me/playlists\",\r\n            type: \"GET\",\r\n            beforeSend: (xhr) => {\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\r\n            },\r\n            success: (data) => {\r\n                if(!data){\r\n                    console.log(\"No Data!\");\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        playlists: data.items\r\n                    })\r\n                    //console.log(\"data saved to state: \" + data.items)\r\n                   \r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    //Method to display yourplaylists.\r\n    //May need a ComponentWillUpdate method to call this.\r\n    getCurrentState(){\r\n        const playlists = this.state.playlists ? (\r\n            this.state.playlists.map(playlist => {\r\n                return(\r\n                    <div>{playlist.name}</div>\r\n                )\r\n        })\r\n    ) : (\r\n            \r\n                <div> No Playlists Found! </div>\r\n            \r\n        )\r\n        return playlists;\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <h1>Playlists</h1>\r\n            <b>{this.getCurrentState()}</b>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default playlists;","import React, {Component} from 'react';\r\nimport Navbar from './Component/Navbar'\r\nimport Player from './Component/Player/Player'\r\nimport User from './Pages/User/User'\r\nimport Playlists from './Pages/Playlist/playlist'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport './App.css';\r\n\r\n\r\nconst authEndpoint = 'https://accounts.spotify.com/authorize';\r\nconst clientId = \"9110bb9fbfc4422c85e722040cf63bc8\";\r\nconst redirectUri = \"http://localhost:3000/Riffle\";\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n];\r\n\r\nconst hash = window.location.hash\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function(initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\nwindow.location.hash = \"\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      token: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Set token\r\n    let _token = hash.access_token;\r\n    if (_token) {\r\n      // Set token\r\n      this.setState({\r\n        token: _token\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    \r\n    return (\r\n      \r\n        <BrowserRouter>\r\n          <div className=\"App\">\r\n            <header className=\"App-header\">\r\n            </header>\r\n              <Navbar>\r\n                <Route to=\"/home\">Home</Route>\r\n                <Route to=\"/playlists\">Playlists</Route>\r\n                <Route to=\"/about\">About</Route>\r\n                <Route to=\"/profile\">Profile</Route>\r\n              </Navbar>\r\n              \r\n              {!this.state.token && (\r\n                <a\r\n                  className=\"btn btn--loginApp-link\"\r\n                  href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>\r\n                  Login to Spotify\r\n                </a>\r\n              )}\r\n              {this.state.token && (\r\n                \r\n                <div>\r\n                  <Player token={this.state.token}></Player>\r\n                  <User token={this.state.token}></User>\r\n                  <Playlists token={this.state.token}></Playlists>\r\n                </div>\r\n              )}\r\n            <footer className=\"App-footer\">\r\n\r\n            </footer>\r\n\r\n          </div>\r\n        </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}